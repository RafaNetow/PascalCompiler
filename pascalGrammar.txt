 PROGRAM -> <HTML> BODYHTML </HTML> $
          
BODYHTML -> BLOCKHTML BODYHTML'

BODYHTML' -> <% LS %> BODYHTML
 					| Ep

BLOCKHTML ->  PlainHTML 
					|Ep 

LS -> S LS
   | Ep
   
LS_LOOP -> LoopS LS_LOOP
   			| Ep
   
S -> Declaracion ;    
   | IF ;
   | PREFOR ;
   | WHILE ;
   | REPEAT ;
   | CONST ;
   | CASE ;
   | DeclareType ;
   | FUNCTIONDECL ;
   | PROCEDUREDECL ;
   | PREID

CONST -> const id ConstDecl	

ConstDecl -> = EXPRESION
            | : id = EXPRESION

/////////////////////////////////////////////////////
LoopS -> S
       | continue ;
       | break ;
/////////////////////////////////////////////////////   
PREID -> Id IdBody

IdBody -> LLAMRFUNCIONSENTENCIA ;
        | := EXPRESION ;

//////////////////////////////////////////////////////

Declaracion -> var id DeclarationTail

DeclarationTail ->  IdOpcional : id     //Lista de ids no puede ser inicializado, id es un tipo
								| 	: id AsignarValor   //id es un tipo
            
ListaId -> id IdOpcional

IdOpcional -> , ListaId
	 					| Ep

AsignarValor -> = EXPRESION
 							| Ep
//////////////////////////////////////////////////////
DeclareType -> type id = TYPE 

TYPE -> EnumeratedType 
      | TypeDef
      | Record
      | Array 

EnumeratedType -> ( ListaId ) 
                  
TypeDef -> id

/-------------------------------------------------------------------/
Record -> record f end ;

ListaPropiedades -> ListaId : TYPE ; ListaPropiedades
										| Ep
                    
/------------------------------------------------------------------/        
Array -> array [ ListaRangos ] of ArrayTypes

ArrayTypes -> id
						| Rango
            | Array

ListaRangos -> Rango ListaRangosOp
							
ListaRangosOp -> , ListaRangos
								| Ep
                
Rango -> | lit_num .. lit_num
        | lit_char .. lit_char

IF -> if EXPRESION then BlOCK ELSE

BlOCK -> S
       | Begin LS End 
       
ELSE -> else BlOCK
		  | Ep
----------------------------------  
PREFOR -> for id ForBody

ForBody -> FOR
					| FORIN
        
FOR -> := EXPRESION to EXPRESION do LOOPBLOCK

FORIN ->	in id do LOOPBLOCK

WHILE -> while EXPRESION do LOOPBLOCK

LOOPBLOCK -> LoopS
					|Begin LS_LOOP End ;
          
REPEAT -> repeat LS_LOOP until EXPRESION
---------------------------------------

LLAMARFUNCION -> id ( LISTAEXPR )

LLAMRFUNCIONSENTENCIA -> ( LISTAEXPR )

LISTAEXPR -> EXPRESSION  LISTAEXPR_OP
					|Ep
          
LISTAEXPR_OP -> , LISTAEXPR
					| Ep

//////////////////////////////////////////////

CASE -> case id index_access of CASELIST end

CASELIST -> CASELITERAL : BLOCK ; CASELIST
					| ELSE BLOCK 
          | Ep
          
CASELITERAL ->  ListaRangos //1+100..4+100, 100+6..100+7 : s := 'lowercase letter (a-z)';
          | LISTAEXPR //400+2, 400+3, 1000 div 5: s := 'fuck';
  
PROCEDUREDECL -> procedure id PARAMS ; FUNCTIONBlOCK 

FUNCTIONDECL -> function id PARAMS : id ; FUNCTIONBlOCK

PARAMS -> ( LISTADECL )

FUNCTIONBlOCK -> Begin LS End

LISTADECL -> DECLPARAM EXTRADECL
					| Ep

EXTRADECL -> ; LISTADECL
					| Ep
          
DECLPARAM -> ListaId : id  
					| var ListaId : id

ListaId -> id IdOpcional

IdOpcional -> , ListaId
	 					| Ep

//LE EXPRESSION***

EXPRESION -> RelationalExpresion

RelationalExpresion -> ExpresionAdicion RelationalExpresion'

RelationalExpresion' -> OpRelational ExpresionAdicion RelationalExpresion'
											| Ep
             
ExpresionAdicion -> ExpresionMul ExpresionAdicion'
                
ExpresionAdicion' -> OpAdicion ExpresionMul ExpresionAdicion'
									|  Ep
                   
ExpresionMul -> ExpresionUnary ExpresionMul'
              
ExpresionMul' -> OpMul ExpresionUnary ExpresionMul'
							| Ep
              
ExpresionUnary -> not Factor
						| Factor
          
Factor ->   id X 
          | lit_num
          | lit_string
          | lit_char
          | lit_boolean
          | lit_real
          | ( EXPRESION )

X -> LLAMRFUNCIONSENTENCIA
		| index_access

index_access -> [EXPRESSION] index_access
								| . id index_access
                | Ep

OpRelational -> <
							| >
              | <=
              | >= 
              | <>
              | =

OpAdicion -> +
					 | -
           | Or
           
OpMul -> *
       | / 
       | div
       | mod
       | and
