// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MiniCompiler.Tests.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReservedWordsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Lexer.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ReservedWords", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ReservedWords")))
            {
                MiniCompiler.Tests.Specs.ReservedWordsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is Empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void InputIsEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is Empty", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have an input of \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table1.AddRow(new string[] {
                        "Eof",
                        "$",
                        "0",
                        "0"});
#line 10
 testRunner.Then("the result should be", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an id equal to haloword")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnIdEqualToHaloword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an id equal to haloword", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I have an input of \'haloworld\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table2.AddRow(new string[] {
                        "Id",
                        "haloworld",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "Eof",
                        "$",
                        "9",
                        "0"});
#line 17
 testRunner.Then("the result should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is 2 ids with whitespaces")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIs2IdsWithWhitespaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is 2 ids with whitespaces", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have an input of \'halo warudo\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table3.AddRow(new string[] {
                        "Id",
                        "halo",
                        "0",
                        "0"});
            table3.AddRow(new string[] {
                        "Id",
                        "warudo",
                        "5",
                        "0"});
            table3.AddRow(new string[] {
                        "Eof",
                        "$",
                        "11",
                        "0"});
#line 25
 testRunner.Then("the result should be", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an int equal to 2042")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnIntEqualTo2042()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an int equal to 2042", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have an input of \'2042\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table4.AddRow(new string[] {
                        "NumericLiteral",
                        "2042",
                        "0",
                        "0"});
            table4.AddRow(new string[] {
                        "Eof",
                        "$",
                        "4",
                        "0"});
#line 34
 testRunner.Then("the result should be", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an int and an a 2042")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnIntAndAnA2042()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an int and an a 2042", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("I have an input of \'2042a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table5.AddRow(new string[] {
                        "NumericLiteral",
                        "2042",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "Id",
                        "a",
                        "4",
                        "0"});
            table5.AddRow(new string[] {
                        "Eof",
                        "$",
                        "5",
                        "0"});
#line 42
 testRunner.Then("the result should be", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an id a2042")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnIdA2042()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an id a2042", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("I have an input of \'a2042\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table6.AddRow(new string[] {
                        "Id",
                        "a2042",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "Eof",
                        "$",
                        "5",
                        "0"});
#line 51
 testRunner.Then("the result should be", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an Addition operator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnAdditionOperator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an Addition operator", ((string[])(null)));
#line 56
 this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I have an input of \'+\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table7.AddRow(new string[] {
                        "SumOp",
                        "+",
                        "0",
                        "0"});
            table7.AddRow(new string[] {
                        "Eof",
                        "$",
                        "1",
                        "0"});
#line 59
 testRunner.Then("the result should be", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an integer reserverd Word")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnIntegerReserverdWord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an integer reserverd Word", ((string[])(null)));
#line 64
 this.ScenarioSetup(scenarioInfo);
#line 65
 testRunner.Given("I have an input of \'integer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table8.AddRow(new string[] {
                        "RwInteger",
                        "integer",
                        "0",
                        "0"});
            table8.AddRow(new string[] {
                        "Eof",
                        "$",
                        "7",
                        "0"});
#line 67
 testRunner.Then("the result should be", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an Hexadecimal opertaorSum and Id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnHexadecimalOpertaorSumAndId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an Hexadecimal opertaorSum and Id", ((string[])(null)));
#line 72
 this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I have an input of \'$AB + b\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table9.AddRow(new string[] {
                        "Hexa",
                        "$AB",
                        "0",
                        "0"});
            table9.AddRow(new string[] {
                        "SumOp",
                        "+",
                        "4",
                        "0"});
            table9.AddRow(new string[] {
                        "Id",
                        "b",
                        "6",
                        "0"});
            table9.AddRow(new string[] {
                        "Eof",
                        "$",
                        "7",
                        "0"});
#line 75
 testRunner.Then("the result should be", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an Binary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an Binary", ((string[])(null)));
#line 82
    this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I have an input of \'%101010\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table10.AddRow(new string[] {
                        "Binary",
                        "%101010",
                        "0",
                        "0"});
            table10.AddRow(new string[] {
                        "Eof",
                        "$",
                        "7",
                        "0"});
#line 85
 testRunner.Then("the result should be", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an Range")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an Range", ((string[])(null)));
#line 90
  this.ScenarioSetup(scenarioInfo);
#line 91
    testRunner.Given("I have an input of \'[1 .. 10] .\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 92
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table11.AddRow(new string[] {
                        "OpenBracketOperator",
                        "[",
                        "0",
                        "0"});
            table11.AddRow(new string[] {
                        "NumericLiteral",
                        "1",
                        "1",
                        "0"});
            table11.AddRow(new string[] {
                        "RangeOp",
                        "..",
                        "3",
                        "0"});
            table11.AddRow(new string[] {
                        "NumericLiteral",
                        "10",
                        "6",
                        "0"});
            table11.AddRow(new string[] {
                        "CloseBracketOperator",
                        "]",
                        "8",
                        "0"});
            table11.AddRow(new string[] {
                        "AccesOp",
                        ".",
                        "10",
                        "0"});
            table11.AddRow(new string[] {
                        "Eof",
                        "$",
                        "11",
                        "0"});
#line 93
    testRunner.Then("the result should be", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an Symbol OpGreaterThanEqual")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnSymbolOpGreaterThanEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an Symbol OpGreaterThanEqual", ((string[])(null)));
#line 102
   this.ScenarioSetup(scenarioInfo);
#line 103
 testRunner.Given("I have an input of \' >= \'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
 testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table12.AddRow(new string[] {
                        "GreaterThanOrEqualOp",
                        ">=",
                        "1",
                        "0"});
#line 105
 testRunner.Then("the result should be", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an operation with sentence end")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnOperationWithSentenceEnd()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an operation with sentence end", ((string[])(null)));
#line 109
 this.ScenarioSetup(scenarioInfo);
#line 110
    testRunner.Given("I have an input of \'temp := 23 + variable/(5*8) -2;\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table13.AddRow(new string[] {
                        "Id",
                        "temp",
                        "0",
                        "0"});
            table13.AddRow(new string[] {
                        "AsiggnationOp",
                        ":=",
                        "5",
                        "0"});
            table13.AddRow(new string[] {
                        "NumericLiteral",
                        "23",
                        "8",
                        "0"});
            table13.AddRow(new string[] {
                        "SumOp",
                        "+",
                        "11",
                        "0"});
            table13.AddRow(new string[] {
                        "Id",
                        "variable",
                        "13",
                        "0"});
            table13.AddRow(new string[] {
                        "DivOp",
                        "/",
                        "21",
                        "0"});
            table13.AddRow(new string[] {
                        "SbLeftParent",
                        "(",
                        "22",
                        "0"});
            table13.AddRow(new string[] {
                        "NumericLiteral",
                        "5",
                        "23",
                        "0"});
            table13.AddRow(new string[] {
                        "MultOp",
                        "*",
                        "24",
                        "0"});
            table13.AddRow(new string[] {
                        "NumericLiteral",
                        "8",
                        "25",
                        "0"});
            table13.AddRow(new string[] {
                        "SbRightParent",
                        ")",
                        "26",
                        "0"});
            table13.AddRow(new string[] {
                        "SubOp",
                        "-",
                        "28",
                        "0"});
            table13.AddRow(new string[] {
                        "NumericLiteral",
                        "2",
                        "29",
                        "0"});
            table13.AddRow(new string[] {
                        "Eos",
                        ";",
                        "30",
                        "0"});
            table13.AddRow(new string[] {
                        "Eof",
                        "$",
                        "31",
                        "0"});
#line 112
    testRunner.Then("the result should be", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is an String Literal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsAnStringLiteral()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is an String Literal", ((string[])(null)));
#line 130
 this.ScenarioSetup(scenarioInfo);
#line 131
    testRunner.Given("I have an input of \'\"test string\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 132
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table14.AddRow(new string[] {
                        "StringLiteral",
                        "\"test string\"",
                        "0",
                        "0"});
            table14.AddRow(new string[] {
                        "Eof",
                        "$",
                        "13",
                        "0"});
#line 133
    testRunner.Then("the result should be", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is many reserved words")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsManyReservedWords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is many reserved words", ((string[])(null)));
#line 137
this.ScenarioSetup(scenarioInfo);
#line 138
    testRunner.Given("I have an input of \'or for while and integer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 139
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table15.AddRow(new string[] {
                        "RwOr",
                        "or",
                        "0",
                        "0"});
            table15.AddRow(new string[] {
                        "RwFor",
                        "for",
                        "3",
                        "0"});
            table15.AddRow(new string[] {
                        "RwWhile",
                        "while",
                        "7",
                        "0"});
            table15.AddRow(new string[] {
                        "RwAnd",
                        "and",
                        "13",
                        "0"});
            table15.AddRow(new string[] {
                        "RwInteger",
                        "integer",
                        "17",
                        "0"});
            table15.AddRow(new string[] {
                        "Eof",
                        "$",
                        "24",
                        "0"});
#line 140
    testRunner.Then("the result should be", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a char literal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsACharLiteral()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a char literal", ((string[])(null)));
#line 149
this.ScenarioSetup(scenarioInfo);
#line 150
    testRunner.Given("I have an input of \'days, age = integer;\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table16.AddRow(new string[] {
                        "Id",
                        "days",
                        "0",
                        "0"});
            table16.AddRow(new string[] {
                        "CommaOperator",
                        ",",
                        "4",
                        "0"});
            table16.AddRow(new string[] {
                        "Id",
                        "age",
                        "6",
                        "0"});
            table16.AddRow(new string[] {
                        "EqualOp",
                        "=",
                        "10",
                        "0"});
            table16.AddRow(new string[] {
                        "RwInteger",
                        "integer",
                        "12",
                        "0"});
            table16.AddRow(new string[] {
                        "Eos",
                        ";",
                        "19",
                        "0"});
            table16.AddRow(new string[] {
                        "Eof",
                        "$",
                        "20",
                        "0"});
#line 152
    testRunner.Then("the result should be", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a charPound")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsACharPound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a charPound", ((string[])(null)));
#line 161
this.ScenarioSetup(scenarioInfo);
#line 162
    testRunner.Given("I have an input of \'#64\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 163
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table17.AddRow(new string[] {
                        "CharPound",
                        "#64",
                        "0",
                        "0"});
            table17.AddRow(new string[] {
                        "Eof",
                        "$",
                        "3",
                        "0"});
#line 164
    testRunner.Then("the result should be", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is logical operators")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsLogicalOperators()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is logical operators", ((string[])(null)));
#line 168
this.ScenarioSetup(scenarioInfo);
#line 169
    testRunner.Given("I have an input of \'< <= <> >= > =\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 170
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table18.AddRow(new string[] {
                        "LessThanOp",
                        "<",
                        "0",
                        "0"});
            table18.AddRow(new string[] {
                        "LessThanOrEqualOp",
                        "<=",
                        "2",
                        "0"});
            table18.AddRow(new string[] {
                        "UnequalOp",
                        "<>",
                        "5",
                        "0"});
            table18.AddRow(new string[] {
                        "GreaterThanOrEqualOp",
                        ">=",
                        "8",
                        "0"});
            table18.AddRow(new string[] {
                        "GreaterOp",
                        ">",
                        "11",
                        "0"});
            table18.AddRow(new string[] {
                        "EqualOp",
                        "=",
                        "13",
                        "0"});
            table18.AddRow(new string[] {
                        "Eof",
                        "$",
                        "14",
                        "0"});
#line 171
    testRunner.Then("the result should be", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is id and a block comment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsIdAndABlockComment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is id and a block comment", ((string[])(null)));
#line 181
this.ScenarioSetup(scenarioInfo);
#line 182
    testRunner.Given("I have an input of \'test { comentario } test2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 183
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table19.AddRow(new string[] {
                        "Id",
                        "test",
                        "0",
                        "0"});
            table19.AddRow(new string[] {
                        "Id",
                        "test2",
                        "20",
                        "0"});
            table19.AddRow(new string[] {
                        "Eof",
                        "$",
                        "25",
                        "0"});
#line 184
    testRunner.Then("the result should be", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is id and a single line comment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsIdAndASingleLineComment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is id and a single line comment", ((string[])(null)));
#line 192
this.ScenarioSetup(scenarioInfo);
#line 193
    testRunner.Given("I have an input of \'test //comentario test2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table20.AddRow(new string[] {
                        "Id",
                        "test",
                        "0",
                        "0"});
            table20.AddRow(new string[] {
                        "Eof",
                        "$",
                        "23",
                        "0"});
#line 195
    testRunner.Then("the result should be", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input is a Double")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ReservedWords")]
        public virtual void InputIsADouble()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input is a Double", ((string[])(null)));
#line 200
 this.ScenarioSetup(scenarioInfo);
#line 201
    testRunner.Given("I have an input of \'2.33\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 202
    testRunner.When("We Tokenize", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Lexeme",
                        "Column",
                        "Row"});
            table21.AddRow(new string[] {
                        "NumericLiteral",
                        "2.33",
                        "0",
                        "0"});
            table21.AddRow(new string[] {
                        "Eof",
                        "$",
                        "4",
                        "0"});
#line 203
    testRunner.Then("the result should be", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
